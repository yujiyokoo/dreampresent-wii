=
-img,0,0: ruby_white_blue_640x480_png

=
-img,0,0: main_title_640x480_png
-wait:
-txt,320,216,black:PRESS A TO START!

= Resetting timer internally...
-resettimer

= Table of Contents
-bkg:ruby_kaigi_2024_dark_bg_png
-txt,40,40: - About me
 - About mruby
 - About Dreamcast
 - About Wii
 - About this application
 - mruby, Dreamcast, and Wii
 - Why?
 - Cross platform development
 - What does cross-platform dev look like?
 - Cross platform dev process
 - Challenges
 - Limitations
 - Future directions
 - Thanks and info
 - Demo

= About me
-txt,60,30:Yuji Yokoo
  Software developer
  Work: CipherStash
  Based in: Tokyo, Japan
  Previously in: Adelaide, South Australia
-img,60,260: yuji_avatar_png

= About mruby
-txt,60,60:Lightweight implemetation of Ruby
-wait:
-txt,60,90: - For embedded environments
-wait:
-txt,60,120: - Easy to compile and link into C

-txt,30,180:
 "mruby is the lightweight implementation of the
  Ruby language complying with part of the ISO
  standard. mruby can be linked and embedded
  within your application."

= About Dreamcast
-img,40,50: dreamcast_photo_png

= About Dreamcast
-txt,60,30: - The best video game console from Sega
-wait:
-txt,60,90: - Released in November 1998
   - Hitachi SH4 at 200MHz
   - 16MB of RAM
   - NEC PowerVR2 at 100MHz
   - 8MB Video RAM
   - GD-ROM
   - Serial Port
   - Modem (33.6K~56K)

= About Dreamcast
-wait:
-txt,30,60: - Strong indie and homebrew communities
-wait:
-txt,30,90: - Good OSS for homebrew (KallistiOS)
-wait:
-txt,30,120:   - KOS ports now includes mruby!
-wait:
-txt,30,150: - Runs custom code with no mods*
-txt,30,240: *assuming you have early-revision consoles
  from 1998, 1999, or early 2000

= About Wii
-txt,10,30: - Great innovative console from Nintendo
-img,40,50: wii_photo_png

= About Wii
-txt,10,30: - Great innovative console from Nintendo
-wait:
-txt,10,90: - Relaesed in 2006
   - Not very powerful - an update to GameCube
   - Wii Remote (aka Wiimote)
   - IBM PowerPC 729MHz
   - 24MB 1T-SRAM + 64MB GDDR3
   - Wii Optical Disc, GameCube Game Disc & SD card
   - Easy exploits available for running your own code
   - No known easy way of booting custom discs

= What's good about Wii today
-wait:
-txt,60,60:Popularity.
Dreamcast sold over 9 million units
-wait:
-txt,60,120,red:Wii sold over 100 million units!
-wait:
-txt,60,150:Lots of people have a Wii at home
-wait:
-txt,60,210:I had one at home

= About this application
-txt,60,60:Dreampresent
-wait:
-txt,60,90: - Presentation app for DC from 2019
-wait:
-txt,60,120: - Runs on DC and Wii
-wait:
-txt,60,150: - It's not "Wiipresent"
-wait:
-txt,60,180: - Part of a larger project:
-txt,60,210:     "Outstanding Performance Award" at
-txt,60,240:     Fukuoka Ruby Awards 2023
-wait:
-txt,60,270: - It's a live demo

= mruby, Dreamcast, and Wii
-txt,30,30:mruby support:
-txt,60,60:Dreamcast - officially supported since 2020
-wait:
-txt,60,90:Wii - officially supported since 2023
-wait:
-txt,60,150:$ make MRUBY_CONFIG=dreamcast_shelf
-wait:
-txt,60,210:$ make MRUBY_CONFIG=nintendo_wii
-wait:
-txt,60,270:(toolchains and libraries needed)

= Why?

= Dreamcast vs Wii
-wait:
-txt,30,60:Different architectures
-wait:
-txt,30,90:Different generation - port from DC to Wii
-wait:
-txt,30,120:Different devkit/SDK/library
-wait:
-txt,30,150:Both have free devkit/SDK with gcc
(KallistiOS, devkitPPC)
-wait:
-txt,30,210:Both allow running your own code fairly easily
-wait:

= Homebrew Development with mruby
-txt,30,40,white,yes:[ C code ]
-txt,430,40,white,yes:[ mruby code ]
-wait:
-txt,350,85,white:compile w/ mrbc (host)
-txt,402,64,white:^
-txt,402,64,white:|
-txt,376,40,yellow:<---
-wait:
-txt,180,40,white,yes:[ bytecode(.c) ]
-wait:
-txt,154,40,yellow:--
-txt,160,62,yellow:|
-txt,160,70,yellow:|
-txt,160,100,yellow:|
-wait:
-txt,172,85,white:<-
-txt,200,72,white:Cross
-txt,200,96,white:compile
-wait:
-txt,30,130,white,yes:[SH4/PPC object file]
-wait:
-txt,160,160,yellow:|
-txt,160,190,yellow:|
-txt,178,175,white:<- link -
-txt,320,160,white,yes:[DC/Wii library (SH4/PPC)]
-wait:
-txt,320,190,white,yes:[mruby library (SH4/PPC)]
-wait:
-txt,30,220,white,yes:[Executable (.elf)]
-wait:
-txt,270,220,white: *runnable on console
-wait:
-txt,160,250,yellow:|
-txt,160,280,yellow:|
-txt,178,265,white:<--- binary munging
-wait:
-txt,30,310,white,yes:[bootable image (cdi/dol)]

= Cross-platform for DC and Wii
-wait:
-txt,60,60:- mrbgems
-wait:
-txt,60,90:  - many issues, and gave up (for now)
-wait:
-txt,60,120:- Manual management
-txt,60,150:  - separate source files for platform things
-wait:
-txt,60,180:  - Develep on DC, Wii, then DC again...

= Directories
-wait:
-txt,60,30:project root
  - Makefile.wii
  - Makefile.dc
  - src/
    - common/
      - .rb files
    - wii/
      - .rb file .c files (including main)
    - dc/
      - .rb file, .c files (including main)
  - romdisk/
    - asset files

= Main entry point (DC)
-txtblock,30,30,600,410
-code,40,40,c:extern const uint8_t bytecode[];
int main(int argc, char **argv) {
  vid_set_mode(DM_640x480_VGA, PM_RGB565);

  mrb_state *mrb = mrb_open();
  struct RClass *dp_mod =
    mrb_define_module(mrb, "DreamPresent");
  define_module_functions(mrb, dp_mod);
  mrb_load_irep(mrb, bytecode);
  mrb_close(mrb);
  return 0;
}
-wait:
-txt,420,40,yellow,yes:<- mruby bytecode
-txt,360,130,yellow,yes:^ Dreamcast video
-txt,360,130,yellow:|
-txt,420,160,yellow,yes:<- init mruby
-txt,442,190,yellow,yes:<- build
-txt,478,220,yellow,yes:module and
functions
-txt,420,280,yellow,yes:<- run mruby code
-txt,260,310,yellow,yes:<- finish

= Main entry point (DC)


= Dreampresent start.rb
-txtblock,40,40,600,400
-code,50,50,ruby:begin
  puts "Starting presentation."
  Dreampresent.new(DreamPresentRb.new(DreamPresent)).start
rescue => ex
  # NOTE: backtrace requires 'mrbc -g'
  p ex.backtrace
  p ex.inspect
  raise ex
end
-wait:
-txt,460,140,yellow,yes:^ kick off
-txt,460,140,yellow:|
-txt,270,220,yellow,yes:<- errors/clean up

= Differences - asset access
-txt,30,30:KOS provides "romdisk" virtual file system
-wait:
-txtblock,40,55,400,120
-code,60,60,C:path = "/rd/content.txt";
f = fs_open(path, O_RDONLY);
-wait:
-txt,30,200:devkitPPC converts assets data to object + header
-wait:
-txtblock,40,225,540,290
-code,60,230,C:extern const uint8_t qrcode_png[];
extern const uint8_t qrcode_png_end[];

= Differences - asset access
-txt,30,30:String to const mapping for Wii
-txtblock,40,55,570,280
-code,60,60,C:const uint8_t *find_img(char* img) {
  if(strcmp(img, "profile_pic.png") == 0) {
    return profile_pic_png;
  } else if(strcmp(img, "avatar.png") == 0) {
    return avatar_png;
  }

= Differences - graphics API
-txt,30,30:KOS provides direct VRAM access
-wait:
-txtblock,40,55,480,120
-code,60,60,C:vram_s[y * PX_PER_LINE + curr_x]
    = PACK_PIXEL(r, g, b);
-wait:
-txt,30,200:GRRLIB on Wii provides graphics functions and
render function to be called every frame
-wait:
-txtblock,40,255,500,380
-code,60,260,C:GRRLIB_Printf(..);
GRRLIB_DrawImage(..);
VIDEO_WaitVSync();
GRRLIB_Render();

= Differences - graphics API
-txt,30,30:With KOS, objects directly manipulate the VRAM
when 'render' is called
-wait:
-txt,30,120:With GRRLIB, objects are added to an object pool
-wait:
-txt,30,180:'render' is called for each frame.
Each object calls the graphics API functions
-wait:
-txt,30,270:Then, GRRLIB_Render is invoked to render
the screen

= Testing and debugging
-txt,40,30:Real console units: where it needs to work
  - Hard to debug
-wait:
-txt,40,90:Emulators
  - Not the same, but handy
-wait:
-txt,40,120:
  - Often comes with terminal output (stdout)
    - Dolphin recently made it easy to print
      to stdout
-wait:
-img,40,70: emulator_console_png

= Summary
-txt,40,40: - Dreamcast and Wii can run the same Ruby code
 - Cross-platform mruby works, but needs more work
 - DX improvements needed (not Digital Transformation)
 - more features (sound, PowerVR, VMU)
 - build more demanding games

= Thanks
-txt,40,40:- mruby developers
 - KallistiOS developers
 - DevkitPro
 - Simulant discord channel
 - Ruby Kaigi organisers and sponsors
-wait:
-txt,40,190: - Everyone who came to this session

= More information
-txt,10,40:Dreampresent cross-platform:
https://gitlab.com/yujiyokoo/dreampresent-wii
-txt,10,200:Dockerfile for Dreamcast:
https://gitlab.com/yujiyokoo/docker-mruby-kos-dc

-txt,80,360: https://yujiyokoo.dev/mruby/

= More information
-txt,50,30:mruby on Retro Consoles
-img,50,60:qrcode_png
